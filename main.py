import os, threading
from http.server import HTTPServer, BaseHTTPRequestHandler

class PingHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

    def do_HEAD(self):
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ HEAD —Ç–µ–º –∂–µ –∫–æ–¥–æ–º, –Ω–æ –±–µ–∑ —Ç–µ–ª–∞
        self.send_response(200)
        self.end_headers()

def start_server():
    port = int(os.getenv("PORT", "8000"))
    HTTPServer(("0.0.0.0", port), PingHandler).serve_forever()

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ, –Ω–µ –º–µ—à–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–æ–¥—É
threading.Thread(target=start_server, daemon=True).start()

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
    ChatMemberHandler,
)
from datetime import datetime, time, timedelta
import os
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.environ['BOT_TOKEN']
GROUP_CHAT_ID = int(os.environ['GROUP_CHAT_ID'])

import urllib.request, urllib.error

try:
    with urllib.request.urlopen(
        f"https://api.telegram.org/bot{BOT_TOKEN}/deleteWebhook?drop_pending_updates=true"
    ) as resp:
        if resp.status == 200:
            print("‚úÖ Webhook deleted via HTTP")
        else:
            print("‚ö†Ô∏è deleteWebhook returned status", resp.status)
except Exception as e:
    print("‚ö†Ô∏è Failed to delete webhook:", e)

bookings = {}
bookingsDB = {}

DB_FILE = "bookings.json"

def generate_time_slots_for_day(day_str: str) -> list[str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 1.5-—á–∞—Å–æ–≤—ã–µ —Å–ª–æ—Ç—ã —Å 10:00 –¥–æ 22:00.
    –í–∫–ª—é—á–∞–µ—Ç –≤—Ä–µ–º—è —Å–∏–µ—Å—Ç—ã (15:00‚Äì17:00), –Ω–æ –∏—Ö –ø–æ–º–µ—Ç–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ.
    """
    day_date = datetime.strptime(day_str, "%d/%m/%Y").date()
    now = datetime.now()

    open_dt      = datetime.combine(day_date, time(10, 0))
    siesta_start = datetime.combine(day_date, time(15, 0))
    siesta_end   = datetime.combine(day_date, time(17, 0))
    close_dt     = datetime.combine(day_date, time(22, 0))
    delta = timedelta(hours=1, minutes=30)

    slots: list[str] = []
    cur = open_dt
    while cur + delta <= close_dt:
        end = cur + delta
        # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ —Å–ª–æ—Ç—ã, –µ—Å–ª–∏ —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è
        if day_date == now.date() and cur < now:
            cur = end
            continue
        slots.append(f"{cur.strftime('%H:%M')}‚Äì{end.strftime('%H:%M')}")
        cur = end
    return slots

def get_date_string(offset):
    return (datetime.now() + timedelta(days=offset)).strftime("%d/%m/%Y")

def is_taken(day, time):
    return time in bookingsDB.get(day, {})

def save_db():
    with open(DB_FILE, "w") as f:
        json.dump(bookingsDB, f)

def load_db():
    global bookingsDB
    if os.path.exists(DB_FILE):
        with open(DB_FILE, "r") as f:
            bookingsDB = json.load(f)

def set_booking(day, time, data):
    if day not in bookingsDB:
        bookingsDB[day] = {}
    bookingsDB[day][time] = data
    save_db()

def cleanup_old_bookings():
    today = datetime.now().date()
    to_delete = [day for day in bookingsDB if datetime.strptime(day, "%d/%m/%Y").date() < today]
    for d in to_delete:
        del bookingsDB[d]
    save_db()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    bookings[chat_id] = {}
    keyboard = [["üéæ Reservar pista", "‚ùå Cancelar reserva"]]
    await update.message.reply_text(
        "üéæ ¬°Reserva tu pista aqu√≠!\n\nPulsa /start para iniciar el proceso.\n\nTodas las reservas se publican aqu√≠ autom√°ticamente üëá",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )

async def handle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    text = update.message.text.strip()
    username = update.message.from_user.username or update.message.from_user.first_name
    state = bookings.get(chat_id, {})

    if "cancel_options" in context.user_data:
        options = context.user_data.get("cancel_options", [])
        for day, time in options:
            if text == f"{day} - {time}":
                if day in bookingsDB and time in bookingsDB[day]:
                    del bookingsDB[day][time]
                    save_db()
                    await update.message.reply_text("‚ùå Reserva cancelada.", reply_markup=ReplyKeyboardRemove())
                    await context.bot.send_message(
                        chat_id=GROUP_CHAT_ID,
                        text=f"‚ùå Reserva cancelada:\nüìÖ {day}\nüïí {time}\nüë§ Usuario: @{username}"
                    )
                    context.user_data["cancel_options"] = []
                    return

    if text.startswith("üéæ"):
        labels = [
            f"Hoy ({get_date_string(0)})",
            f"Ma√±ana ({get_date_string(1)})",
            f"Pasado ma√±ana ({get_date_string(2)})"
        ]
        keyboard = [labels]
        await update.message.reply_text(
            "üìÖ ¬øPara qu√© d√≠a quieres reservar?",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return

    if text.startswith("‚ùå"):
        await cancelar(update, context)
        return

    if not state.get("day") and any(text.startswith(p) for p in ["Hoy", "Ma√±ana", "Pasado ma√±ana"]):
        if text.startswith("Hoy"):
            day = get_date_string(0)
        elif text.startswith("Ma√±ana"):
            day = get_date_string(1)
        else:
            day = get_date_string(2)

        # –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
        bookings[chat_id] = {"day": day}

        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã
        slots = generate_time_slots_for_day(day)

        # —Å—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        for slot in slots:
            # –ø–∞—Ä—Å–∏–º –Ω–∞—á–∞–ª–æ —Å–ª–æ—Ç–∞
            start_h, start_m = map(int, slot.split("‚Äì")[0].split(":"))
            st = time(start_h, start_m)

            if is_taken(day, slot):
                keyboard.append([f"üü• {slot}"])
            elif time(15, 0) <= st < time(17, 0):
                keyboard.append([f"üõèÔ∏è {slot}"])
            else:
                keyboard.append([f"üü© {slot}"])

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            "üïí Elige una hora:",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )

    if state.get("day") and not state.get("time"):
        clean_text = text.replace("üü©", "").replace("üü•", "").strip()
        if is_taken(state["day"], clean_text):
            await update.message.reply_text("‚õî Esa hora ya est√° reservada.")
            return
        elif clean_text in TIME_SLOTS:
            bookings[chat_id]["time"] = clean_text
            await update.message.reply_text("üè† ¬øCu√°l es tu piso? (ej: 2B o 3A)")
            return

    if state.get("day") and state.get("time") and not state.get("floor"):
        piso = text
        day = state["day"]
        time = state["time"]

        if is_taken(day, time):
            await update.message.reply_text("‚õî Esa hora ya est√° reservada.")
            bookings.pop(chat_id, None)
            return

        set_booking(day, time, {"username": username, "piso": piso})
        await update.message.reply_text(f"‚úÖ ¬°Reservado!\n\nüìÖ D√≠a: {day}\nüïí Hora: {time}\nüè† Piso: {piso}")
        await context.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text=f"üì¢ Nueva reserva\nüìÖ D√≠a: {day}\nüïí Hora: {time}\nüè† Piso: {piso}"
        )
        bookings.pop(chat_id, None)
        return


async def cancelar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    username = update.message.from_user.username or update.message.from_user.first_name

    user_bookings = []
    for day, slots in bookingsDB.items():
        for time, info in slots.items():
            if info.get("username") == username:
                user_bookings.append((day, time))

    if not user_bookings:
        await update.message.reply_text("üîé No tienes reservas activas.")
        return

    context.user_data["cancel_options"] = user_bookings
    keyboard = [[f"{d} - {t}"] for d, t in user_bookings]
    await update.message.reply_text(
        "‚ùì ¬øCu√°l reserva quieres cancelar?",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Escribe /start para comenzar")

async def welcome_new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    old_status = update.chat_member.old_chat_member.status
    new_status = update.chat_member.new_chat_member.status

    if old_status in ("left", "kicked") and new_status in ("member", "administrator"):
        await context.bot.send_message(
            chat_id=update.chat_member.chat.id,
            text=(
                "üéæ ¬°Reserva tu pista aqu√≠!\n\n"
                "Pulsa /start para iniciar el proceso.\n\n"
                "Todas las reservas se publican aqu√≠ autom√°ticamente üëá"
            )
        )

if __name__ == '__main__':
    load_db()
    cleanup_old_bookings()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cancelar", cancelar))
    # ...–≤—Å–µ –≤–∞—à–∏ –∏–º–ø–æ—Ä—Ç—ã, —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã—à–µ...

# --- Handler –¥–ª—è —Å–ª–æ—Ç–æ–≤ —Å–∏–µ—Å—Ç—ã --- #
async def on_siesta_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "Lo siento, este horario no est√° disponible debido a la siesta. Por favor, elige otro horario."
    )

if __name__ == '__main__':
    load_db()
    cleanup_old_bookings()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cancelar", cancelar))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handler —Å–∏–µ—Å—Ç—ã –î–û –æ–±—â–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ!
    app.add_handler(
        MessageHandler(
            filters.TEXT & filters.Regex(r"^üõèÔ∏è"),
            on_siesta_choice
        )
    )

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle))
    app.add_handler(MessageHandler(filters.COMMAND, unknown))
    app.add_handler(ChatMemberHandler(welcome_new_member, ChatMemberHandler.CHAT_MEMBER))

    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É–¥–∞–ª—è–µ–º –≤—Å–µ webhooks, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ getUpdates
    import asyncio
    asyncio.get_event_loop().run_until_complete(
        app.bot.delete_webhook(drop_pending_updates=True)
    )
    print("‚úÖ Webhook deleted, ready for polling")

    print("‚úÖ Bot listo...")
app.run_polling(drop_pending_updates=True)
